import { ElementRef, OnInit, OnChanges, DoCheck, AfterViewInit, OnDestroy, KeyValueDiffers, NgZone, EventEmitter } from '@angular/core';
import { FroalaChartsService } from './froalacharts.service';
import FroalaChartsEvent from '../interfaces/FroalaChartsEvent';
import FroalaChartInstance from '../interfaces/FroalaChartInstance';
declare class FroalaChartsComponent implements OnInit, OnChanges, DoCheck, AfterViewInit, OnDestroy {
    private differs;
    private zone;
    chartObj: any;
    placeholder: string;
    dataSource: any;
    type: string;
    id: string;
    width: string;
    height: string;
    renderAt: string;
    dataFormat: string;
    events: string;
    link: string;
    showDataLoadingMessage: boolean;
    showChartLoadingMessage: boolean;
    baseChartMessageFont: string;
    baseChartMessageFontSize: string;
    baseChartMessageColor: string;
    dataLoadStartMessage: string;
    dataLoadErrorMessage: string;
    dataInvalidMessage: string;
    dataEmptyMessage: string;
    typeNotSupportedMessage: string;
    loadMessage: string;
    renderErrorMessage: string;
    containerBackgroundColor: string;
    containerBackgroundOpacity: string;
    containerClassName: string;
    baseChartMessageImageHAlign: string;
    baseChartMessageImageVAlign: string;
    baseChartMessageImageAlpha: number;
    baseChartMessageImageScale: number;
    typeNotSupportedMessageImageHAlign: string;
    typeNotSupportedMessageImageVAlign: string;
    typeNotSupportedMessageImageAlpha: number;
    typeNotSupportedMessageImageScale: number;
    dataLoadErrorMessageImageHAlign: string;
    dataLoadErrorMessageImageVAlign: string;
    dataLoadErrorMessageImageAlpha: number;
    dataLoadErrorMessageImageScale: number;
    dataLoadStartMessageImageHAlign: string;
    dataLoadStartMessageImageVAlign: string;
    dataLoadStartMessageImageAlpha: number;
    dataLoadStartMessageImageScale: number;
    dataInvalidMessageImageHAlign: string;
    dataInvalidMessageImageVAlign: string;
    dataInvalidMessageImageAlpha: number;
    dataInvalidMessageImageScale: number;
    dataEmptyMessageImageHAlign: string;
    dataEmptyMessageImageVAlign: string;
    dataEmptyMessageImageAlpha: number;
    dataEmptyMessageImageScale: number;
    renderErrorMessageImageHAlign: string;
    renderErrorMessageImageVAlign: string;
    renderErrorMessageImageAlpha: number;
    renderErrorMessageImageScale: number;
    loadMessageImageHAlign: string;
    loadMessageImageVAlign: string;
    loadMessageImageAlpha: number;
    loadMessageImageScale: number;
    chartConfig: string;
    /**
     * All Events List
     */
    private eventList;
    /**
     * All events emitter
     */
    beforeLinkedItemOpen: EventEmitter<FroalaChartsEvent>;
    linkedItemOpened: EventEmitter<FroalaChartsEvent>;
    beforeLinkedItemClose: EventEmitter<FroalaChartsEvent>;
    linkedItemClosed: EventEmitter<FroalaChartsEvent>;
    printReadyStateChange: EventEmitter<FroalaChartsEvent>;
    dataLoadRequestCompleted: EventEmitter<FroalaChartsEvent>;
    dataLoadError: EventEmitter<FroalaChartsEvent>;
    dataLoadCancelled: EventEmitter<FroalaChartsEvent>;
    dataLoadRequestCancelled: EventEmitter<FroalaChartsEvent>;
    dataUpdated: EventEmitter<FroalaChartsEvent>;
    dataUpdateCancelled: EventEmitter<FroalaChartsEvent>;
    dataLoadRequested: EventEmitter<FroalaChartsEvent>;
    beforeDataUpdate: EventEmitter<FroalaChartsEvent>;
    realTimeUpdateComplete: EventEmitter<FroalaChartsEvent>;
    chartCleared: EventEmitter<FroalaChartsEvent>;
    slicingEnd: EventEmitter<FroalaChartsEvent>;
    slicingStart: EventEmitter<FroalaChartsEvent>;
    entityRollOut: EventEmitter<FroalaChartsEvent>;
    entityRollOver: EventEmitter<FroalaChartsEvent>;
    entityClick: EventEmitter<FroalaChartsEvent>;
    connectorRollOver: EventEmitter<FroalaChartsEvent>;
    connectorRollOut: EventEmitter<FroalaChartsEvent>;
    connectorClick: EventEmitter<FroalaChartsEvent>;
    markerRollOver: EventEmitter<FroalaChartsEvent>;
    markerRollOut: EventEmitter<FroalaChartsEvent>;
    markerClick: EventEmitter<FroalaChartsEvent>;
    pageNavigated: EventEmitter<FroalaChartsEvent>;
    rotationEnd: EventEmitter<FroalaChartsEvent>;
    rotationStart: EventEmitter<FroalaChartsEvent>;
    centerLabelRollover: EventEmitter<FroalaChartsEvent>;
    centerLabelRollout: EventEmitter<FroalaChartsEvent>;
    centerLabelClick: EventEmitter<FroalaChartsEvent>;
    centerLabelChanged: EventEmitter<FroalaChartsEvent>;
    chartClick: EventEmitter<FroalaChartsEvent>;
    chartMouseMove: EventEmitter<FroalaChartsEvent>;
    chartRollOver: EventEmitter<FroalaChartsEvent>;
    chartRollOut: EventEmitter<FroalaChartsEvent>;
    backgroundLoaded: EventEmitter<FroalaChartsEvent>;
    backgroundLoadError: EventEmitter<FroalaChartsEvent>;
    legendItemClicked: EventEmitter<FroalaChartsEvent>;
    legendItemRollover: EventEmitter<FroalaChartsEvent>;
    legendItemRollout: EventEmitter<FroalaChartsEvent>;
    logoRollover: EventEmitter<FroalaChartsEvent>;
    logoRollout: EventEmitter<FroalaChartsEvent>;
    logoClick: EventEmitter<FroalaChartsEvent>;
    logoLoaded: EventEmitter<FroalaChartsEvent>;
    logoLoadError: EventEmitter<FroalaChartsEvent>;
    beforeExport: EventEmitter<FroalaChartsEvent>;
    exported: EventEmitter<FroalaChartsEvent>;
    exportCancelled: EventEmitter<FroalaChartsEvent>;
    beforePrint: EventEmitter<FroalaChartsEvent>;
    printComplete: EventEmitter<FroalaChartsEvent>;
    printCancelled: EventEmitter<FroalaChartsEvent>;
    dataLabelClick: EventEmitter<FroalaChartsEvent>;
    dataLabelRollOver: EventEmitter<FroalaChartsEvent>;
    dataLabelRollOut: EventEmitter<FroalaChartsEvent>;
    scrollStart: EventEmitter<FroalaChartsEvent>;
    scrollEnd: EventEmitter<FroalaChartsEvent>;
    onScroll: EventEmitter<FroalaChartsEvent>;
    zoomReset: EventEmitter<FroalaChartsEvent>;
    zoomedOut: EventEmitter<FroalaChartsEvent>;
    zoomedIn: EventEmitter<FroalaChartsEvent>;
    zoomed: EventEmitter<FroalaChartsEvent>;
    zoomModeChanged: EventEmitter<FroalaChartsEvent>;
    pinned: EventEmitter<FroalaChartsEvent>;
    dataRestored: EventEmitter<FroalaChartsEvent>;
    beforeDataSubmit: EventEmitter<FroalaChartsEvent>;
    dataSubmitError: EventEmitter<FroalaChartsEvent>;
    dataSubmitted: EventEmitter<FroalaChartsEvent>;
    dataSubmitCancelled: EventEmitter<FroalaChartsEvent>;
    chartUpdated: EventEmitter<FroalaChartsEvent>;
    nodeAdded: EventEmitter<FroalaChartsEvent>;
    nodeUpdated: EventEmitter<FroalaChartsEvent>;
    nodeDeleted: EventEmitter<FroalaChartsEvent>;
    connectorAdded: EventEmitter<FroalaChartsEvent>;
    connectorUpdated: EventEmitter<FroalaChartsEvent>;
    connectorDeleted: EventEmitter<FroalaChartsEvent>;
    labelAdded: EventEmitter<FroalaChartsEvent>;
    labelDeleted: EventEmitter<FroalaChartsEvent>;
    selectionRemoved: EventEmitter<FroalaChartsEvent>;
    selectionStart: EventEmitter<FroalaChartsEvent>;
    selectionEnd: EventEmitter<FroalaChartsEvent>;
    labelClick: EventEmitter<FroalaChartsEvent>;
    labelRollOver: EventEmitter<FroalaChartsEvent>;
    labelRollOut: EventEmitter<FroalaChartsEvent>;
    labelDragStart: EventEmitter<FroalaChartsEvent>;
    labelDragEnd: EventEmitter<FroalaChartsEvent>;
    dataplotDragStart: EventEmitter<FroalaChartsEvent>;
    dataplotDragEnd: EventEmitter<FroalaChartsEvent>;
    processClick: EventEmitter<FroalaChartsEvent>;
    processRollOver: EventEmitter<FroalaChartsEvent>;
    processRollOut: EventEmitter<FroalaChartsEvent>;
    categoryClick: EventEmitter<FroalaChartsEvent>;
    categoryRollOver: EventEmitter<FroalaChartsEvent>;
    categoryRollOut: EventEmitter<FroalaChartsEvent>;
    milestoneClick: EventEmitter<FroalaChartsEvent>;
    milestoneRollOver: EventEmitter<FroalaChartsEvent>;
    milestoneRollOut: EventEmitter<FroalaChartsEvent>;
    chartTypeChanged: EventEmitter<FroalaChartsEvent>;
    overlayButtonClick: EventEmitter<FroalaChartsEvent>;
    loaded: EventEmitter<FroalaChartsEvent>;
    rendered: EventEmitter<FroalaChartsEvent>;
    drawComplete: EventEmitter<FroalaChartsEvent>;
    renderComplete: EventEmitter<FroalaChartsEvent>;
    dataInvalid: EventEmitter<FroalaChartsEvent>;
    dataXMLInvalid: EventEmitter<FroalaChartsEvent>;
    dataLoaded: EventEmitter<FroalaChartsEvent>;
    noDataToDisplay: EventEmitter<FroalaChartsEvent>;
    legendPointerDragStart: EventEmitter<FroalaChartsEvent>;
    legendPointerDragStop: EventEmitter<FroalaChartsEvent>;
    legendRangeUpdated: EventEmitter<FroalaChartsEvent>;
    alertComplete: EventEmitter<FroalaChartsEvent>;
    realTimeUpdateError: EventEmitter<FroalaChartsEvent>;
    dataplotRollOver: EventEmitter<FroalaChartsEvent>;
    dataplotRollOut: EventEmitter<FroalaChartsEvent>;
    dataplotClick: EventEmitter<FroalaChartsEvent>;
    linkClicked: EventEmitter<FroalaChartsEvent>;
    beforeRender: EventEmitter<FroalaChartsEvent>;
    renderCancelled: EventEmitter<FroalaChartsEvent>;
    beforeResize: EventEmitter<FroalaChartsEvent>;
    resized: EventEmitter<FroalaChartsEvent>;
    resizeCancelled: EventEmitter<FroalaChartsEvent>;
    beforeDispose: EventEmitter<FroalaChartsEvent>;
    disposed: EventEmitter<FroalaChartsEvent>;
    disposeCancelled: EventEmitter<FroalaChartsEvent>;
    linkedChartInvoked: EventEmitter<FroalaChartsEvent>;
    beforeDrillDown: EventEmitter<FroalaChartsEvent>;
    drillDown: EventEmitter<FroalaChartsEvent>;
    beforeDrillUp: EventEmitter<FroalaChartsEvent>;
    drillUp: EventEmitter<FroalaChartsEvent>;
    drillDownCancelled: EventEmitter<FroalaChartsEvent>;
    drillUpCancelled: EventEmitter<FroalaChartsEvent>;
    initialized: EventEmitter<FroalaChartInstance>;
    containerId: string;
    private configObj;
    private oldDataSource;
    private oldDataTable;
    private constructerParams;
    element: ElementRef;
    froalachartsService: FroalaChartsService;
    constructor(element: ElementRef, froalachartsService: FroalaChartsService, differs: KeyValueDiffers, zone: NgZone);
    checkIfDataTableExists(dataSource: any): boolean;
    cloneDataSource(obj: any): any;
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngDoCheck(): void;
    updateChartData(): void;
    updateWidth(): void;
    updateHeight(): void;
    updateType(): void;
    generateEventsCallback(eventList: Array<string>): {};
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
}
export { FroalaChartsComponent };
